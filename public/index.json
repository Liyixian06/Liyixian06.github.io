[{"author":null,"categories":["Life"],"content":"持续更新，兼翻译流程和工具记录","date":1747824913,"description":"持续更新，兼翻译流程和工具记录","dir":"post/","excerpt_html":"持续更新，兼翻译流程和工具记录","excerpt_text":"持续更新，兼翻译流程和工具记录","expirydate":-62135596800,"fuzzywordcount":900,"html":"持续更新，兼翻译流程和工具记录","keywords":null,"kind":"page","lang":"en","lastmod":1747824913,"objectID":"76a0e51e60689583d46c0ef9d8deced2","permalink":"https://Liyixian06.github.io/list/translation/","publishdate":"2025-05-21T18:55:13+08:00","readingtime":2,"relpermalink":"/list/translation/","section":"post","summary":"\u003cp\u003e以前翻译视频都是随便来的，工具和格式都换过好几次，现在流程趋于稳定，遂记录。\u003c/p\u003e\n\u003ch2 id=\"烧烤架和工具\"\u003e烧烤架和工具\u003c/h2\u003e\n\u003ch3 id=\"生肉英字和其他原料\"\u003e生肉、英字和其他原料\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Tyrrrz/YoutubeDownloader\"\u003eYoutubeDownloader\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://acghelper.com/\"\u003eacghelper\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Pirate Bay、Unblockit、RARBG、YTS、1337x 等各大 BT 站\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://downsub.com/\"\u003eDownSub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://youtubethumbnailimage.com/\"\u003eYoutube Thumbnail Image\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"翻译和压制\"\u003e翻译和压制\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://aegisub.org/zh-cn/\"\u003eAegisub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFFmpeg\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003effmpeg -i input.mp4 -vf “ass=subtitle.ass” crf=18 output.mp4\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://handbrake.fr/\"\u003eHandBrake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e翻译格式\n\u003cul\u003e\n\u003cli\u003e思源黑体\u003c/li\u003e\n\u003cli\u003e不使用标点符号，使用空格\u003c/li\u003e\n\u003cli\u003e一行字幕中两个人对话，每个人前面使用 - 号区分\u003c/li\u003e\n\u003cli\u003e不翻译人名\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"正在烤和待上桌\"\u003e正在烤和待上桌\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eClique x David Fincher, réalisateur culte de Fight Club et Seven - CANAL+\u003c/strong\u003e\u003cbr\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/2ykcUuZg9hI?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\u003c/p\u003e","tags":["Film and TV","List"],"title":"自制烤肉菜单","type":"post","url":"/list/translation/","weight":0,"wordcount":866},{"author":null,"categories":["Tech"],"content":" ","date":1702966890,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":500,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1702966890,"objectID":"ecde3d21428db5d7a902e9a3bf54fc27","permalink":"https://Liyixian06.github.io/2023/12/compiler-principles-ch10/","publishdate":"2023-12-19T14:21:30+08:00","readingtime":1,"relpermalink":"/2023/12/compiler-principles-ch10/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e优化种类\u003c/li\u003e\n\u003cli\u003e循环\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e优化编译器：控制流分析 -\u0026gt; 数据流分析 -\u0026gt; 代码变换\u003cbr\u003e\n与目的机器无关\u003c/p\u003e\n\u003ch3 id=\"优化种类\"\u003e优化种类\u003c/h3\u003e\n\u003cp\u003e局部优化（\u003cem\u003ei.e.\u003c/em\u003e 基本块内优化）、全局优化\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e消去公共子表达式\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e复制传播：对单次赋值 \u003ccode\u003ef:=g\u003c/code\u003e，在随后语句中用 \u003ccode\u003eg\u003c/code\u003e 替换 \u003ccode\u003ef\u003c/code\u003e\u003cbr\u003e\n\n  \u003cimg src=\"/img/%e5%a4%8d%e5%88%b6%e4%bc%a0%e6%92%ad.png\" alt=\"\"\u003e\n\n\u003c/p\u003e","tags":["CS","compiler"],"title":"编译原理笔记10：代码优化","type":"post","url":"/2023/12/compiler-principles-ch10/","weight":0,"wordcount":404},{"author":null,"categories":["Tech"],"content":" ","date":1702362019,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":1200,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1702362019,"objectID":"e9c219619d68e6d51fc4d23bad3ff60b","permalink":"https://Liyixian06.github.io/2023/12/compiler-principles-ch9/","publishdate":"2023-12-12T14:20:19+08:00","readingtime":3,"relpermalink":"/2023/12/compiler-principles-ch9/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基本块和流图\u003c/li\u003e\n\u003cli\u003e代码生成基本算法\u003c/li\u003e\n\u003cli\u003e寄存器分配\u003c/li\u003e\n\u003cli\u003e窥孔优化\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"设计问题\"\u003e设计问题\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e输入\n\u003cul\u003e\n\u003cli\u003e中间表示形式\u003c/li\u003e\n\u003cli\u003e符号表信息\u003c/li\u003e\n\u003cli\u003e类型检查和转换已经完成\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e输出\n\u003cul\u003e\n\u003cli\u003e汇编语言\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e内存管理\n\u003cul\u003e\n\u003cli\u003e见 \u003ca href=\"https://liyixian06.github.io/2023/11/compiler-principles-ch7/\"\u003eCh7\u003c/a\u003e 中讨论的内存分配策略\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e指令集选择\u003c/li\u003e\n\u003cli\u003e寄存器分配\n\u003cul\u003e\n\u003cli\u003eallocation, assignment\u003c/li\u003e\n\u003cli\u003eregiser-pair\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e计算顺序\u003c/li\u003e\n\u003cli\u003e代码生成方法\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e寻址方式开销：绝对 \u003ccode\u003eM\u003c/code\u003e (1)/寄存器 \u003ccode\u003eR\u003c/code\u003e (0)/索引 \u003ccode\u003ec(R)\u003c/code\u003e (1)/间接寄存器 \u003ccode\u003e*R\u003c/code\u003e (0)、间接索引 \u003ccode\u003e*c(R)\u003c/code\u003e (1)\u003cbr\u003e\n指令开销：\u003ccode\u003eMOV R0,R1\u003c/code\u003e（1）/ \u003ccode\u003eMOV R5,M\u003c/code\u003e (2)/ \u003ccode\u003eADD #1,R3\u003c/code\u003e (2)/ \u003ccode\u003eSUB 4(R0),*12(R1)\u003c/code\u003e (3)\u003c/p\u003e","tags":["CS","compiler"],"title":"编译原理笔记09：代码生成","type":"post","url":"/2023/12/compiler-principles-ch9/","weight":0,"wordcount":1137},{"author":null,"categories":["Tech"],"content":" ","date":1701873385,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":2100,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1701873385,"objectID":"a67b3480064d7e60aa95ed93fe4fde3b","permalink":"https://Liyixian06.github.io/2023/12/computer-networking-ch5/","publishdate":"2023-12-06T22:36:25+08:00","readingtime":5,"relpermalink":"/2023/12/computer-networking-ch5/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e路由选择算法\n\u003cul\u003e\n\u003cli\u003e链路状态算法\u003c/li\u003e\n\u003cli\u003e距离向量算法\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e互联网路由选择协议\n\u003cul\u003e\n\u003cli\u003eRIP\u003c/li\u003e\n\u003cli\u003eOSPF\u003c/li\u003e\n\u003cli\u003eBGP\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e软件定义网络 SDN\u003c/li\u003e\n\u003cli\u003eICMP 互联网控制报文协议\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"路由选择算法\"\u003e路由选择算法\u003c/h3\u003e\n\u003cp\u003e路由选择算法 routing algorithm：从发送方到接收方确定一条通过路由器网络的最好路径\u003cbr\u003e\n-\u0026gt; 最好：一般指开销最小 \u003cem\u003e（距离、时沿、费用、堵塞）\u003c/em\u003e\u003cbr\u003e\n分布式：每台路由器独立计算\u003c/p\u003e","tags":["CS","computer networking"],"title":"计算机网络笔记04B：网络层-控制平面","type":"post","url":"/2023/12/computer-networking-ch5/","weight":0,"wordcount":2055},{"author":null,"categories":["Tech"],"content":" ","date":1701865861,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":800,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1701865861,"objectID":"057bf610314d9c48ea189749b1ee880d","permalink":"https://Liyixian06.github.io/2023/12/compiler-principles-ch8/","publishdate":"2023-12-06T20:31:01+08:00","readingtime":2,"relpermalink":"/2023/12/compiler-principles-ch8/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e三地址码\u003c/li\u003e\n\u003cli\u003e语句翻译：声明、赋值、布尔表达式、控制流\u003c/li\u003e\n\u003cli\u003eBackPatching\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"三地址码\"\u003e三地址码\u003c/h3\u003e\n\u003cp\u003e一般形式：\u003ccode\u003ex:=y op z\u003c/code\u003e（注意赋值符号是 \u003ccode\u003e:=\u003c/code\u003e）\u003cbr\u003e\n三地址码的实现：\u003cbr\u003e\n利用属性 \u003ccode\u003eE.place\u003c/code\u003e 保存值，\u003ccode\u003eE.code\u003c/code\u003e 计算 E 的三地址码\u003cbr\u003e\nnewtemp 生成临时变量名，gen 输出一条三地址码指令\u003c/p\u003e","tags":["CS","compiler"],"title":"编译原理笔记08：中间代码生成","type":"post","url":"/2023/12/compiler-principles-ch8/","weight":0,"wordcount":758},{"author":null,"categories":["Tech"],"content":" ","date":1701830011,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":2100,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1701830011,"objectID":"de7c9dfe763619557303cf33c3c6ef04","permalink":"https://Liyixian06.github.io/2023/12/computer-architecture-ch11/","publishdate":"2023-12-06T10:33:31+08:00","readingtime":5,"relpermalink":"/2023/12/computer-architecture-ch11/","section":"post","summary":"\u003ch3 id=\"shared-memory-model\"\u003eShared memory model\u003c/h3\u003e\n\u003cp\u003e线程：独立的 execution flow，通常共享内存\u003cbr\u003e\n-\u0026gt; process 有独立的内存，一个 process 里可以有若干个 thread，它们复用 CPU 资源，通常由 OS 管理、切换\u003c/p\u003e\n\u003cp\u003eshared memory model：程序员显式地创建多线程\u003c/p\u003e","tags":["CS","computer architecture"],"title":"计算机体系结构11：Multicore","type":"post","url":"/2023/12/computer-architecture-ch11/","weight":0,"wordcount":2086},{"author":null,"categories":["Tech"],"content":" ","date":1701154304,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":900,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1701154304,"objectID":"ec45a201a553da8e2fa0aa049e1b97a9","permalink":"https://Liyixian06.github.io/2023/11/compiler-principles-ch7/","publishdate":"2023-11-28T14:51:44+08:00","readingtime":2,"relpermalink":"/2023/11/compiler-principles-ch7/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e源语言相关问题\u003c/li\u003e\n\u003cli\u003e存储组织\u003c/li\u003e\n\u003cli\u003e内存分配策略\u003c/li\u003e\n\u003cli\u003e访问非局部名字\u003c/li\u003e\n\u003cli\u003e参数传递\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"源语言相关问题\"\u003e源语言相关问题\u003c/h3\u003e\n\u003cp\u003e过程（函数）：procedure（静态）/activation（动态，一次执行）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e过程定义、过程名、过程体\u003c/li\u003e\n\u003cli\u003e函数、调用、形参、实参\u003c/li\u003e\n\u003cli\u003e生存期\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e过程的生命期或者不重叠、或者嵌套；\u003cbr\u003e\n递归：过程 p 的某个活动尚未结束，可以开始它的一个新的活动\u003c/p\u003e","tags":["CS","compiler"],"title":"编译原理笔记07：运行时环境","type":"post","url":"/2023/11/compiler-principles-ch7/","weight":0,"wordcount":876},{"author":null,"categories":["Tech"],"content":" ","date":1700549479,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":700,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1700549479,"objectID":"7160167bea3fbccced72a1ebc14344ea","permalink":"https://Liyixian06.github.io/2023/11/compiler-principles-ch6/","publishdate":"2023-11-21T14:51:19+08:00","readingtime":2,"relpermalink":"/2023/11/compiler-principles-ch6/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e类型系统\u003c/li\u003e\n\u003cli\u003e类型表达式的等价\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e静态检查 static checking：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e类型检查（type check）\n\u003cul\u003e\n\u003cli\u003e操作对象必须与操作符匹配，\u003cem\u003ei.e.\u003c/em\u003e 函数名不能相加\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e控制流检查（flow-of-control check）\n\u003cul\u003e\n\u003cli\u003ebreak 必须退出 while、for、switch…\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e唯一性检查（uniqueness check）\n\u003cul\u003e\n\u003cli\u003e对象（变量、标号…）定义必须唯一\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e名字关联检查（name-related check）\n\u003cul\u003e\n\u003cli\u003e相同名字在不同位置\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"类型系统\"\u003e类型系统\u003c/h3\u003e\n\u003cp\u003e将类型赋予语法结构的规则；每个表达式都有一个关联的类型\u003cbr\u003e\n基本类型（语言内部支持类型）、结构类型（组合基本类型构成新类型）\u003c/p\u003e","tags":["CS","compiler"],"title":"编译原理笔记06：类型检查","type":"post","url":"/2023/11/compiler-principles-ch6/","weight":0,"wordcount":629},{"author":null,"categories":["Tech"],"content":" ","date":1700547153,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":2400,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1700547153,"objectID":"06bef3b1e297d9261622f22a0754c687","permalink":"https://Liyixian06.github.io/2023/11/compiler-principles-ch5/","publishdate":"2023-11-21T14:12:33+08:00","readingtime":5,"relpermalink":"/2023/11/compiler-principles-ch5/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e语法制导的定义\u003c/li\u003e\n\u003cli\u003e构造语法树\u003c/li\u003e\n\u003cli\u003eS-属性定义、L-属性定义\u003c/li\u003e\n\u003cli\u003e自顶向下计算属性\u003c/li\u003e\n\u003cli\u003e自底向上计算属性\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"语法制导定义\"\u003e语法制导定义\u003c/h3\u003e\n\u003cp\u003e语法制导翻译是一种搭建在语法分析基础上的翻译技术。\u003cbr\u003e\n思路：\u003cstrong\u003e给每个符号（特别是非终结符）设置一系列属性 attribute，在语法翻译的时候对属性进行求值。\u003c/strong\u003e\u003c/p\u003e","tags":["CS","compiler"],"title":"编译原理笔记05：语法制导翻译","type":"post","url":"/2023/11/compiler-principles-ch5/","weight":0,"wordcount":2321},{"author":null,"categories":["Tech"],"content":" ","date":1700413990,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":2200,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1700413990,"objectID":"616f8cb8dda502605ea5245d123744f0","permalink":"https://Liyixian06.github.io/2023/11/operating-system-7.0/","publishdate":"2023-11-20T01:13:10+08:00","readingtime":5,"relpermalink":"/2023/11/operating-system-7.0/","section":"post","summary":"\u003cp\u003e设备（\u003cem\u003ee.g.鼠标、键盘、显示器\u003c/em\u003e）的特点：速度慢、难以共享、工作逻辑 varies\u003cbr\u003e\n操作系统的设备管理使得应用程序不需要关心设备的细节，就可以统一响应\u003c/p\u003e\n\u003cp\u003e外设借助一个 controller/adapter 和计算机连接在一起\u003cbr\u003e\n适配器采集设备上操作系统关心的数据，有三类接口：数据、命令、状态\u003cbr\u003e\n操作系统整理每个厂商提交的设备不同的数据、命令、状态格式，经过封装和抽象，抹去硬件的差异，交给上层应用程序\u003cbr\u003e\n设备驱动程序 device driver 负责识别 controller 的数据，完成翻译；现代操作系统已经预先继承了若干个通用的 driver\u003c/p\u003e","tags":["CS","operating system"],"title":"操作系统笔记05：设备管理","type":"post","url":"/2023/11/operating-system-7.0/","weight":0,"wordcount":2136},{"author":null,"categories":["Tech"],"content":" ","date":1700054451,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":2300,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1700054451,"objectID":"86c6d8e043d5364e3332fd57c7fe12f0","permalink":"https://Liyixian06.github.io/2023/11/computer-networking-ch4/","publishdate":"2023-11-15T21:20:51+08:00","readingtime":5,"relpermalink":"/2023/11/computer-networking-ch4/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e网络层概述\u003c/li\u003e\n\u003cli\u003e路由器工作原理\u003c/li\u003e\n\u003cli\u003e网际协议：IPv4、网络地址转换、IPv6\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"网络层概述\"\u003e网络层概述\u003c/h3\u003e\n\u003cp\u003e网络层的作用是将 packet 从发送主机移动到接收主机。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e转发 forwarding，数据平面实现\u003c/li\u003e\n\u003cli\u003e路由选择 routing，控制平面实现，确定 packet 从源到目的地的路径\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e每台路由器中有一个转发表 forwarding table，路由器检查到达的 packet header 的字段值，将其在转发表中索引，确定输出链路接口。\u003cbr\u003e\n转发表是如何配置的？\u003c/p\u003e","tags":["CS","computer networking"],"title":"计算机网络笔记04A：网络层-数据平面","type":"post","url":"/2023/11/computer-networking-ch4/","weight":0,"wordcount":2233},{"author":null,"categories":["Tech"],"content":" ","date":1699887915,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":2300,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1699887915,"objectID":"868f0b15bc35aa2f21cc758b952d86ef","permalink":"https://Liyixian06.github.io/2023/11/operating-system-6.0/","publishdate":"2023-11-13T23:05:15+08:00","readingtime":5,"relpermalink":"/2023/11/operating-system-6.0/","section":"post","summary":"\u003cp\u003e硬盘的物理结构：若干个磁道和扇区\u003cbr\u003e\n文件系统：把一段长度可变的连续数据放到磁盘上，而且能通过文件夹/文件的名字实现内容检索\u003c/p\u003e\n\u003ch3 id=\"文件系统\"\u003e文件系统\u003c/h3\u003e\n\u003cp\u003e如何找到数据在磁盘中的位置？\u003c/p\u003e","tags":["CS","operating system"],"title":"操作系统笔记04：文件管理","type":"post","url":"/2023/11/operating-system-6.0/","weight":0,"wordcount":2258},{"author":null,"categories":["Tech"],"content":" ","date":1699886313,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":900,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1699886313,"objectID":"a9516d227457770437fe5e58a5505072","permalink":"https://Liyixian06.github.io/2023/11/computer-architecture-ch9/","publishdate":"2023-11-13T22:38:33+08:00","readingtime":2,"relpermalink":"/2023/11/computer-architecture-ch9/","section":"post","summary":"\u003ch3 id=\"computer-system\"\u003eComputer System\u003c/h3\u003e\n\u003cp\u003e\n  \u003cimg src=\"/img/computer_system.png\" alt=\"\"\u003e\n\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCPUs and memories\n\u003cul\u003e\n\u003cli\u003econnected by memory bus\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eI/O peripherals: storage, input, display, network\u0026hellip;\n\u003cul\u003e\n\u003cli\u003eConnected by system bus (which is connected to memory bus)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eOperating System\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eabstraction：给计算机硬件资源提供软件接口 (\u003cem\u003ee.g.\u003c/em\u003e threads, files, etc.)，简化 application 编程\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eisolation：虚拟化，给每个 process private CPU/memory/IO（用到的不是整个计算机，看到的是整个计算机）\u003c/p\u003e","tags":["CS","computer architecture"],"title":"计算机体系结构09：Virtual Memory","type":"post","url":"/2023/11/computer-architecture-ch9/","weight":0,"wordcount":822},{"author":null,"categories":["Tech"],"content":" ","date":1699281476,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":600,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1699281476,"objectID":"3f2fc792533e6c1dcf09c5492bd488c4","permalink":"https://Liyixian06.github.io/2023/11/computer-architecture-ch8/","publishdate":"2023-11-06T22:37:56+08:00","readingtime":2,"relpermalink":"/2023/11/computer-architecture-ch8/","section":"post","summary":"\u003ch3 id=\"superscalar\"\u003eSuperscalar\u003c/h3\u003e\n\u003cp\u003escalar pipeline 的性能极限是 CPI=IPC=1，但限于 hazards 也无法达到\u003cbr\u003e\nmultiple issues -\u0026gt; superscalar\u003c/p\u003e\n\u003cp\u003e\n  \u003cimg src=\"/img/superscalar_pipeline.png\" alt=\"\"\u003e\n\n\u003c/p\u003e\n\u003cp\u003e要多套硬件同时执行多条指令（指令级并行 ILP），需要检查它们的依赖关系\u003cbr\u003e\n寄存器调度，并行度取决于 workload\u003cbr\u003e\n目前大部分是 4 inst/cycle\u003c/p\u003e","tags":["CS","computer architecture"],"title":"计算机体系结构笔记08：Superscalar and VLIW","type":"post","url":"/2023/11/computer-architecture-ch8/","weight":0,"wordcount":518},{"author":null,"categories":["Tech"],"content":" ","date":1698678256,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":1400,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1698678256,"objectID":"b252c33f80fe7a734f50a92e891fd65a","permalink":"https://Liyixian06.github.io/2023/10/operating-system-5.0/","publishdate":"2023-10-30T23:04:16+08:00","readingtime":3,"relpermalink":"/2023/10/operating-system-5.0/","section":"post","summary":"\u003cp\u003eIPC (Inter Process Communication) 的同步问题 \u003cem\u003ee.g. 买面包\u003c/em\u003e\u003cbr\u003e\n（这里只考虑单处理器，不考虑多核）\u003cbr\u003e\n临界区 critical section：空闲则入、忙则等待、有限等待、让权等待（optional）\u003c/p\u003e","tags":["CS","operating system"],"title":"操作系统笔记03：进程间通信","type":"post","url":"/2023/10/operating-system-5.0/","weight":0,"wordcount":1323},{"author":null,"categories":["Tech"],"content":" ","date":1698135989,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":6900,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1698135989,"objectID":"2773b5ee867e6123f0c4dab4e2ab5504","permalink":"https://Liyixian06.github.io/2023/10/compiler-principles-ch4/","publishdate":"2023-10-24T16:26:29+08:00","readingtime":14,"relpermalink":"/2023/10/compiler-principles-ch4/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e上下文无关文法\u003c/li\u003e\n\u003cli\u003e语法分析\n\u003cul\u003e\n\u003cli\u003e自顶向下\u003c/li\u003e\n\u003cli\u003e自底向上：LR (0) / SLR / LR (1) / LALR\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e语法错误处理\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"上下文无关文法\"\u003e上下文无关文法\u003c/h2\u003e\n\u003cp\u003e正则表达式的能力不足 -\u0026gt; \u003ca href=\"https://liyixian06.github.io/2023/09/compiler-principles-ch2/\"\u003ech2 CFG\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e凡是正则表达式能表示的语言，都能用 CFG 表示：可以机械地由 NFA 变换而得，NFA 字母表视为 terminal 集合\u003c/p\u003e","tags":["CS","compiler"],"title":"编译原理笔记04：语法分析","type":"post","url":"/2023/10/compiler-principles-ch4/","weight":0,"wordcount":6812},{"author":null,"categories":["Tech"],"content":" ","date":1697609870,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":4500,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1697609870,"objectID":"36765a8eba637e6e72c9bfba406f1848","permalink":"https://Liyixian06.github.io/2023/10/computer-networking-ch3/","publishdate":"2023-10-18T14:17:50+08:00","readingtime":9,"relpermalink":"/2023/10/computer-networking-ch3/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e多路复用和多路分解\u003c/li\u003e\n\u003cli\u003eUDP：特点、检验和\u003c/li\u003e\n\u003cli\u003e可靠数据传输：rdt、pipeline\u003c/li\u003e\n\u003cli\u003eTCP：segment 结构、可靠数据传输、流量控制、连接管理\u003c/li\u003e\n\u003cli\u003e网络拥塞\u003c/li\u003e\n\u003cli\u003eTCP 拥塞控制\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"概述和传输层服务\"\u003e概述和传输层服务\u003c/h3\u003e\n\u003cp\u003e传输层协议只工作在主机中，而非路由器\u003cbr\u003e\n传输层将从发送应用程序进程接收到的 message 转换为 segment with header，传递给网络层，后者封装成 packet 向目的地发送\u003c/p\u003e","tags":["CS","computer networking"],"title":"计算机网络笔记03：传输层","type":"post","url":"/2023/10/computer-networking-ch3/","weight":0,"wordcount":4455},{"author":null,"categories":["Tech"],"content":" ","date":1697466988,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":900,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1697466988,"objectID":"99afbe1e7735b4821730e6560ffdd204","permalink":"https://Liyixian06.github.io/2023/10/computer-architecture-ch7/","publishdate":"2023-10-16T22:36:28+08:00","readingtime":2,"relpermalink":"/2023/10/computer-architecture-ch7/","section":"post","summary":"\u003cp\u003e以 cache block 为单位 fetch the data before needed by the program，需要预测地址\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e减少 compulsory cache misses\u003c/li\u003e\n\u003cli\u003e减少内存 latency：L2 的 miss rate 减小，L1 的 latency 就会减小\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果取错了：占用空间和带宽，但不用刷新 pipeline，影响很小\u003c/p\u003e","tags":["CS","computer architecture"],"title":"计算机体系结构笔记07：Prefetching","type":"post","url":"/2023/10/computer-architecture-ch7/","weight":0,"wordcount":803},{"author":null,"categories":["Tech"],"content":" ","date":1696862168,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":2400,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1696862168,"objectID":"8f828ab12987544e7a9a25e1bab279f4","permalink":"https://Liyixian06.github.io/2023/10/computer-architecture-ch6/","publishdate":"2023-10-09T22:36:08+08:00","readingtime":5,"relpermalink":"/2023/10/computer-architecture-ch6/","section":"post","summary":"\u003ch3 id=\"overview-of-memory-arrays\"\u003eOverview of Memory Arrays\u003c/h3\u003e\n\u003cp\u003e计算机如何存储数据？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ememory array 存储阵列\u003c/li\u003e\n\u003cli\u003e2^N 行 M 列，每行对应一个 word-line，每列对应一个 bit-line\u003c/li\u003e\n\u003cli\u003e每次读一行，activate 一个 word-line，输出一行的 storage\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  \u003cimg src=\"/img/memory_array_organization.png\" alt=\"\"\u003e\n\n\u003c/p\u003e","tags":["CS","computer architecture"],"title":"计算机体系结构笔记06：Caches","type":"post","url":"/2023/10/computer-architecture-ch6/","weight":0,"wordcount":2360},{"author":null,"categories":["Tech"],"content":" ","date":1696861093,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":3400,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1696861093,"objectID":"733553572b33d252e92768316ec06aef","permalink":"https://Liyixian06.github.io/2023/10/operating-system-4.0/","publishdate":"2023-10-09T22:18:13+08:00","readingtime":7,"relpermalink":"/2023/10/operating-system-4.0/","section":"post","summary":"\u003cp\u003e为什么要做内存管理？\u003cbr\u003e\n内存太多，提高利用率 -\u0026gt; 内存不够，需要闪转腾挪\u003c/p\u003e\n\u003ch3 id=\"内存布局和分区分配\"\u003e内存布局和分区分配\u003c/h3\u003e\n\u003cp\u003e内存管理的第一个问题是如何在内存区中同时加载多个应用程序\u003cbr\u003e\n将内存分区，不同程序加载进不同分区\u003cbr\u003e\n-\u0026gt; 指令中的哪些数值是地址？\u003cbr\u003e\n编译器在链接时标记了哪些是地址，可以在加载时动态修改\u003c/p\u003e","tags":["CS","operating system"],"title":"操作系统笔记02：内存管理","type":"post","url":"/2023/10/operating-system-4.0/","weight":0,"wordcount":3306},{"author":null,"categories":["Tech"],"content":" ","date":1695813747,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":4700,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1695813747,"objectID":"6ecd3e8f61553a0ca95627260be0bb96","permalink":"https://Liyixian06.github.io/2023/09/computer-networking-ch2/","publishdate":"2023-09-27T19:22:27+08:00","readingtime":10,"relpermalink":"/2023/09/computer-networking-ch2/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e应用层协议和进程通信模型\u003c/li\u003e\n\u003cli\u003e运输服务\u003c/li\u003e\n\u003cli\u003eWeb 服务与 HTTP 协议\u003c/li\u003e\n\u003cli\u003e电子邮件\u003c/li\u003e\n\u003cli\u003e域名系统 DNS\u003c/li\u003e\n\u003cli\u003eP2P 文件分发\u003c/li\u003e\n\u003cli\u003eDASH\u003c/li\u003e\n\u003cli\u003e内容分发网络 CDN\u003c/li\u003e\n\u003cli\u003eSocket 编程\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"应用层协议原理\"\u003e应用层协议原理\u003c/h3\u003e\n\u003cp\u003e应用：可以进行通信的分布式进程\u003c/p\u003e\n\u003ch4 id=\"应用程序体系结构\"\u003e应用程序体系结构\u003c/h4\u003e\n\u003cp\u003e应用程序体系结构由开发者设计\u003c/p\u003e","tags":["CS","computer networking"],"title":"计算机网络笔记02：应用层","type":"post","url":"/2023/09/computer-networking-ch2/","weight":0,"wordcount":4650},{"author":null,"categories":["Tech"],"content":" ","date":1695712931,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":3400,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1695712931,"objectID":"4b81bd85c29da0fc41d42f0f31e20d51","permalink":"https://Liyixian06.github.io/2023/09/compiler-principles-ch3/","publishdate":"2023-09-26T15:22:11+08:00","readingtime":7,"relpermalink":"/2023/09/compiler-principles-ch3/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etoken 及属性\u003c/li\u003e\n\u003cli\u003e正则表达式与转换图\u003c/li\u003e\n\u003cli\u003eLex 程序\u003c/li\u003e\n\u003cli\u003e有限自动机\n\u003cul\u003e\n\u003cli\u003e正则表达式到 NFA\u003c/li\u003e\n\u003cli\u003eNFA 到 DFA\u003c/li\u003e\n\u003cli\u003eDFA 的化简\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"token-及属性\"\u003etoken 及属性\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e词法记号/单词 token：字符串集的分类\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003e\u0026lt;identifier\u0026gt;,\u0026lt;number\u0026gt;\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e\u0026lt;记号名[, 属性值]\u0026gt;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e模式 pattern：描述字符串集如何分类为 token 的规则\n\u003cul\u003e\n\u003cli\u003e正则表达式，\u003cem\u003e[A-Z]*\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e词法单元/词素 lexeme：程序中实际出现的字符串，匹配 pattern 分类为 token\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003ei, count, name, 60\u0026hellip;\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e保存进符号表；返回给语法分析器\u003c/li\u003e\n\u003cli\u003e词素的信息：token 影响语法分析、属性影响翻译（这个 token 里词素之间的区别）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  \u003cimg src=\"/img/token%e5%8f%8a%e5%b1%9e%e6%80%a7.png\" alt=\"\"\u003e\n\n\u003c/p\u003e","tags":["CS","compiler"],"title":"编译原理笔记03：词法分析","type":"post","url":"/2023/09/compiler-principles-ch3/","weight":0,"wordcount":3376},{"author":null,"categories":["Tech"],"content":" ","date":1695566128,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":1400,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1695566128,"objectID":"888f61710918f3ed9136254f8652be56","permalink":"https://Liyixian06.github.io/2023/09/computer-architecture-ch5/","publishdate":"2023-09-24T22:35:28+08:00","readingtime":3,"relpermalink":"/2023/09/computer-architecture-ch5/","section":"post","summary":"\u003ch3 id=\"control-dependencies\"\u003eControl Dependencies\u003c/h3\u003e\n\u003cp\u003e一些可行的 solution：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e阻塞流水线，直到知道下个 fetch address 是什么\u003c/li\u003e\n\u003cli\u003ebranch prediction\u003c/li\u003e\n\u003cli\u003e延迟槽 branch delayed slot：在分支指令后面填上（通常是一条）无论是否跳转都会执行的指令，避免预测失败后的浪费\u003c/li\u003e\n\u003cli\u003efine-grained multithreading：干点别的\u003c/li\u003e\n\u003cli\u003e判定式执行 predicated execution：消除 control-flow 指令\u003c/li\u003e\n\u003cli\u003e两边都取指 multipath execution\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e阻塞意味着 control-flow 指令后的下一条 fetch address 在流水线里至少要经过 N 个周期才能确定；如果每个周期能取 W 条指令（即，流水线宽度为 W），那预测错误就会带来 N*W 个浪费的指令槽\u003c/p\u003e","tags":["CS","computer architecture"],"title":"计算机体系结构笔记05：Branch Prediction","type":"post","url":"/2023/09/computer-architecture-ch5/","weight":0,"wordcount":1316},{"author":null,"categories":["Tech"],"content":" ","date":1695039872,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":1700,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1695039872,"objectID":"87e3fb0c46d733b00c62d5df61baae63","permalink":"https://Liyixian06.github.io/2023/09/operating-system-3.0/","publishdate":"2023-09-18T20:24:32+08:00","readingtime":4,"relpermalink":"/2023/09/operating-system-3.0/","section":"post","summary":"\u003cp\u003e计算资源的共享共用：提交给 OS 的任务交替运行\u003cbr\u003e\nCocurrent 并发 \u003cem\u003eVS\u003c/em\u003e Parallel 并行\u003c/p\u003e\n\u003cp\u003e两个问题：如何保存/恢复一个程序的执行过程？如何知道一个程序要触发“慢操作”？\u003cbr\u003e\n保存/恢复一个程序的执行过程：处理器的状态来自寄存器，程序的状态来自内存变量；后者不被破坏时，只要保存/恢复程序执行过程的全部寄存器（context）。\u003c/p\u003e","tags":["CS","operating system"],"title":"操作系统笔记01：进程管理","type":"post","url":"/2023/09/operating-system-3.0/","weight":0,"wordcount":1687},{"author":null,"categories":["Tech"],"content":" ","date":1694883582,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":2800,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1694883582,"objectID":"6aceccfc8836c41b566c33a5841a0657","permalink":"https://Liyixian06.github.io/2023/09/compiler-principles-ch2/","publishdate":"2023-09-17T00:59:42+08:00","readingtime":6,"relpermalink":"/2023/09/compiler-principles-ch2/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e上下文无关文法（CFG）\n\u003cul\u003e\n\u003cli\u003e推导和语法树\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e语法制导翻译\n\u003cul\u003e\n\u003cli\u003e翻译模式\u003c/li\u003e\n\u003cli\u003eYacc 编程\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e自顶向下预测分析\n\u003cul\u003e\n\u003cli\u003e设计实现预测分析器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e简单词法分析\u003c/li\u003e\n\u003cli\u003e代码生成\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"语法定义\"\u003e语法定义\u003c/h3\u003e\n\u003cp\u003e上下文无关文法（CFG）：描述源程序的语法结构\u003cbr\u003e\nCFG 的四个部分：\u003c/p\u003e","tags":["CS","compiler"],"title":"编译原理笔记02：构造一个简单的编译器","type":"post","url":"/2023/09/compiler-principles-ch2/","weight":0,"wordcount":2751},{"author":null,"categories":["Note"],"content":" ","date":1694104185,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":3700,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1694104185,"objectID":"731d102461223d7b7c27af53c93c8977","permalink":"https://Liyixian06.github.io/2023/09/note_exit_voice_loyalty/","publishdate":"2023-09-08T00:29:45+08:00","readingtime":8,"relpermalink":"/2023/09/note_exit_voice_loyalty/","section":"post","summary":"\u003cp\u003e\u003cstrong\u003e简评：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e核心观点比较有趣，在退出-竞争模型之外引入了呼吁和忠诚的概念，算是传统理论的缝隙，很有启发\u003c/li\u003e\n\u003cli\u003e理论不复杂，但概念详实，扩展分析各种现实问题（婚姻、文化、国家）很好用\u003c/li\u003e\n\u003cli\u003e思想性而非经验或模型的，因此缺乏实证材料和测量\u003c/li\u003e\n\u003cli\u003e问题是论证比较细碎，章节内结构也不大清晰\u003c/li\u003e\n\u003cli\u003e疑问：经济和政治的分野似乎不够清楚，况且企业和政府面对的现实区别之大，是否真的可以这样打通？\u003c/li\u003e\n\u003cli\u003e读完感觉是一本润学论著……\u003c/li\u003e\n\u003cli\u003e翻译不太好，有条件的可以对照原文看。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"导言以及学说背景\"\u003e导言以及学说背景\u003c/h4\u003e\n\u003cp\u003emotive：很少有人考虑修复经济主体的衰减（假设企业谋求利润的理性程度恒定；社会资源会在竞争中自行配置，单个企业的衰败无关紧要）\u003cbr\u003e\nproblem：竞争可以实现恢复，但有时它可求不可得 \u003cem\u003e（国民经济中垄断式企业会形成竞争死角）\u003c/em\u003e；竞争激烈时，单个企业的衰败也许可以被矫正\u003c/p\u003e","tags":["social","economy","politics"],"title":"读书笔记：退出、呼吁与忠诚","type":"post","url":"/2023/09/note_exit_voice_loyalty/","weight":0,"wordcount":3646},{"author":null,"categories":["Tech"],"content":"语言处理系统的概述","date":1694052198,"description":"语言处理系统的概述","dir":"post/","excerpt_html":"语言处理系统的概述","excerpt_text":"语言处理系统的概述","expirydate":-62135596800,"fuzzywordcount":600,"html":"语言处理系统的概述","keywords":null,"kind":"page","lang":"en","lastmod":1694052198,"objectID":"87719720dde7b50b4a61bbe3e54ac292","permalink":"https://Liyixian06.github.io/2023/09/compiler-principles-ch1/","publishdate":"2023-09-07T10:03:18+08:00","readingtime":2,"relpermalink":"/2023/09/compiler-principles-ch1/","section":"post","summary":"\u003cp\u003e语言处理系统：把用软件语言书写的各种程序翻译成可在计算机上执行的程序，或最终的计算结果，或其他中间形式。\u003c/p\u003e\n\u003cp\u003e如何完成翻译？\u003c/p\u003e\n\u003ch4 id=\"语言处理系统总则\"\u003e语言处理系统总则\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e预处理：删除注释、宏扩展、文件包含（. i 文件）\u003c/li\u003e\n\u003cli\u003e编译：将源程序翻译成汇编语言（.s 文件）\n\u003col\u003e\n\u003cli\u003e词法分析，创建符号表\n\u003col\u003e\n\u003cli\u003e把源代码中的字符串（关键字、标识符、操作符、界符等）转换成 token\u003c/li\u003e\n\u003cli\u003e正则表达式、flex（词法文件 calc.l）\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e语法分析\n\u003col\u003e\n\u003cli\u003e把 token 串转换成 AST 抽象语法树，生成清晰的代码结构\u003c/li\u003e\n\u003cli\u003e按照语法结构的递归定义从上到下匹配\u003c/li\u003e\n\u003cli\u003eBison/Yacc（语法文件 calc.y）\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e语义分析\n\u003col\u003e\n\u003cli\u003e理解语句要做什么（唯一的含义）\u003c/li\u003e\n\u003cli\u003e收集信息：引用消解、上下文信息\u003c/li\u003e\n\u003cli\u003e类型分析和检查\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e中间代码生成\n\u003col\u003e\n\u003cli\u003eLLVM IR (Intermediate Representation)\n\u003col\u003e\n\u003cli\u003e基本单位是 module\u003c/li\u003e\n\u003cli\u003emodule 中可以包含多个顶层实体（函数/全局变量）\u003c/li\u003e\n\u003cli\u003e函数由一系列 basic block 组成，每个 block 里有若干 instruction\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e得到. bc 二进制中间语言和. ll 可读代码（两种格式等价）\u003c/li\u003e\n\u003cli\u003epipeline：不同高级语言对应的前端将其转换成 IR，统一优化、链接后再传给不同 target (x86/arm/risc-v/mips/\u0026hellip;) 的后端，转换成对应的二进制代码\u003c/li\u003e\n\u003cli\u003e在这一步，高级语言的差异消失了\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e代码优化\n\u003col\u003e\n\u003cli\u003eLLVM 后端优化\u003c/li\u003e\n\u003cli\u003e数据流分析、基于 basic block 生成的控制流图 CFG 优化\u003c/li\u003e\n\u003cli\u003e\u003cem\u003ee.g. 代数优化、常数折叠、死代码删除\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e代码生成\n\u003col\u003e\n\u003cli\u003e确定变量的内存位置、指定寄存器\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e汇编：将汇编语言翻译成机器语言，并打包成可重定位目标程序（. o 文件）\n\u003col\u003e\n\u003cli\u003e指令选择\u003c/li\u003e\n\u003cli\u003e寄存器分配\u003c/li\u003e\n\u003cli\u003e指令重排\u003c/li\u003e\n\u003cli\u003e指令编码\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e链接/加载：将可重定位机器代码和相应的目标文件、库文件链接在一起，形成能运行的程序\u003c/li\u003e\n\u003c/ol\u003e","tags":["CS","compiler"],"title":"编译原理笔记01：引论","type":"post","url":"/2023/09/compiler-principles-ch1/","weight":0,"wordcount":589},{"author":null,"categories":["Tech"],"content":"计算机网络的概述","date":1693997527,"description":"计算机网络的概述","dir":"post/","excerpt_html":"计算机网络的概述","excerpt_text":"计算机网络的概述","expirydate":-62135596800,"fuzzywordcount":2400,"html":"计算机网络的概述","keywords":null,"kind":"page","lang":"en","lastmod":1693997527,"objectID":"813f541fd5dff9f02fed75b59e8b3d4b","permalink":"https://Liyixian06.github.io/2023/09/computer-networking-ch1/","publishdate":"2023-09-06T18:52:07+08:00","readingtime":5,"relpermalink":"/2023/09/computer-networking-ch1/","section":"post","summary":"\u003cp\u003e\u003cem\u003e本文是《计算机网络：自顶向下方法》（Computer Networking: A Top-Down Approach）的阅读笔记，不成文，仅记录。\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSummary：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e构成网络的基本硬件和软件\u003c/li\u003e\n\u003cli\u003e边缘：网络中运行的主机和网络应用\u003c/li\u003e\n\u003cli\u003e核心：接入网、链路和交换机\u003c/li\u003e\n\u003cli\u003e分组交换的时延、丢包、吞吐\u003c/li\u003e\n\u003cli\u003e体系结构原则\u003c/li\u003e\n\u003cli\u003e攻击和安全\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"什么是因特网\"\u003e什么是因特网？\u003c/h3\u003e\n\u003ch4 id=\"因特网的硬件和软件组件\"\u003e因特网的硬件和软件组件\u003c/h4\u003e\n\u003cp\u003e主机/端系统通过通信链路和分组交换机连接到一起；不同链路的传输速率不同\u003cbr\u003e\n发送数据时将数据分段并加上首部字节，形成信息包 packet\u003cbr\u003e\n分组交换机：路由器、链路层交换机 link-layer switch\u003cbr\u003e\n主机通过因特网服务提供商 ISP 接入因特网，每个 ISP 是多台分组交换机和多段通信链路组成的网络；ISP 互联，每个都独立管理\u003cbr\u003e\n主机、分组交换机和其他因特网部件运行协议 protocol，控制信息接收和发送：TCP 传输控制协议/IP 网际协议\u003c/p\u003e","tags":["CS","computer networking"],"title":"计算机网络笔记01：计算机网络和因特网","type":"post","url":"/2023/09/computer-networking-ch1/","weight":0,"wordcount":2310},{"author":null,"categories":["Tech"],"content":"  ","date":1693208214,"description":"  ","dir":"post/","excerpt_html":"  ","excerpt_text":"  ","expirydate":-62135596800,"fuzzywordcount":700,"html":"  ","keywords":null,"kind":"page","lang":"en","lastmod":1693208214,"objectID":"a7887f5d546cec1e2dd14a87ea94acc0","permalink":"https://Liyixian06.github.io/2023/08/computer-architecture-ch1/","publishdate":"2023-08-28T15:36:54+08:00","readingtime":2,"relpermalink":"/2023/08/computer-architecture-ch1/","section":"post","summary":"\u003ch3 id=\"metrics\"\u003eMetrics\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003elatency (execution time)：执行一项固定任务的时间\u003c/li\u003e\n\u003cli\u003ethroughput (bandwidth)：单位时间执行的任务\n\u003cul\u003e\n\u003cli\u003e利用并行增加 throughput, not latency\u003c/li\u003e\n\u003cli\u003e二者通常是冲突的\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"cpu-performance\"\u003eCPU Performance\u003c/h3\u003e\n\u003cp\u003eperformance 计算公式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elatency = seconds/program = 下列三者的乘积：\n\u003cul\u003e\n\u003cli\u003einst/program 指令数\u003c/li\u003e\n\u003cli\u003ecycles/inst (CPI) 主要研究的是这个 (caches, parallelism)\u003c/li\u003e\n\u003cli\u003eseconds/cycle (clock period)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIPC = 1/CPI\u003cbr\u003e\n直观（越大越好），所以比较常用\u003cbr\u003e\nCPI 计算：\\(CPI=\\sum\\limits_{inst} frequencies*costs\\)\u003cbr\u003e\nCPI = (CPU time*clock frequency)/dynamic inst count\u003cbr\u003e\nCPI breakdown (CPU, mem, etc.) 比较有用，可以知道性能问题出现在哪里\u003cbr\u003e\nfrequency 作为衡量性能的 metrics，1 Ghz = 1 cycle/nenosecond\u003c/p\u003e","tags":["CS","computer architecture"],"title":"计算机体系结构笔记01：Performance","type":"post","url":"/2023/08/computer-architecture-ch1/","weight":0,"wordcount":615},{"author":null,"categories":["Life"],"content":"一份互联网看片指南","date":1690044961,"description":"一份互联网看片指南","dir":"post/","excerpt_html":"一份互联网看片指南","excerpt_text":"一份互联网看片指南","expirydate":-62135596800,"fuzzywordcount":3500,"html":"一份互联网看片指南","keywords":null,"kind":"page","lang":"en","lastmod":1690044961,"objectID":"a69fa83b9c190502400503d2837ac49c","permalink":"https://Liyixian06.github.io/2023/07/how-to-watch/","publishdate":"2023-07-23T00:56:01+08:00","readingtime":7,"relpermalink":"/2023/07/how-to-watch/","section":"post","summary":"\u003cp\u003e以下是一篇互联网看片指南。从上网开始到现在，看片也有小十年了，不算什么发烧友，供和我一样就随便看看但不太清楚去哪看的普通观众了解（确实见过一些人会直接在搜索栏打下“电影名 在线播放”几个字，也不是不行但是……）。\u003c/p\u003e","tags":["Film and TV"],"title":"如何看片","type":"post","url":"/2023/07/how-to-watch/","weight":0,"wordcount":3426},{"author":null,"categories":null,"content":null,"date":1689724800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1689724800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://Liyixian06.github.io/about/","publishdate":"2023-07-19T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"\u003ch2 id=\"basic\"\u003eBasic\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e学生\u003c/li\u003e\n\u003cli\u003e常居北京\u003c/li\u003e\n\u003cli\u003e写代码\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"dos-and-not-dos\"\u003eDos and Not Dos\u003c/h2\u003e\n\u003ch3 id=\"dos\"\u003eDos\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e有时读书，很少写作\u003c/li\u003e\n\u003cli\u003e间歇性学语言\u003c/li\u003e\n\u003cli\u003e装修\u003c/li\u003e\n\u003cli\u003e吃好喝好，都在酒里\u003c/li\u003e\n\u003cli\u003e溜街日行四万步\u003c/li\u003e\n\u003cli\u003e两栖爬行动物爱好者\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"not-dos\"\u003eNot Dos\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e游泳以外的一切运动\u003c/li\u003e\n\u003cli\u003e推荐信息流\u003c/li\u003e\n\u003cli\u003e客服电话\u003c/li\u003e\n\u003c/ul\u003e","tags":null,"title":"About Me","type":"page","url":"/about/","weight":0,"wordcount":77},{"author":null,"categories":["Tech"],"content":"this is a description.","date":1528070400,"description":"this is a description.","dir":"post/","excerpt_html":"this is a description.","excerpt_text":"this is a description.","expirydate":-62135596800,"fuzzywordcount":1000,"html":"this is a description.","keywords":null,"kind":"page","lang":"en","lastmod":1528070400,"objectID":"94ea21a04d022ffd5a830d7b0567d780","permalink":"https://Liyixian06.github.io/post/post2/","publishdate":"2018-06-04T00:00:00Z","readingtime":2,"relpermalink":"/post/post2/","section":"post","summary":"\u003cp\u003e这是一个测试网站功能/记录后续准备添加功能的页面。\u003c/p\u003e\n\u003ch1 id=\"update\"\u003eUpdate\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e字数统计\u003c/li\u003e\n\u003cli\u003eGiscus 评论系统\u003c/li\u003e\n\u003cli\u003e使用 KaTex 支持了 Latex\u003c/li\u003e\n\u003cli\u003e本来想尝试一下图床，但确实找不到什么好用的，加之发布图片的需求并没有那么大，所以姑且还是保持原状。\u003c/li\u003e\n\u003cli\u003ehugo 版本更新到了 0.147.3\u003c/li\u003e\n\u003cli\u003e显示全部 tag 以及文章数\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"shortcode\"\u003eshortcode\u003c/h1\u003e\n\u003ch2 id=\"bilibili\"\u003eBilibili\u003c/h2\u003e\n\n\n\n\u003cstyle\u003e\n    #biliplayer {\n      width: 100%;\n      height: 600px;\n    }\n    @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\n      #biliplayer {\n        width: 100%;\n        height: 250px;\n      }\n    }\n\u003c/style\u003e\n\n\n    \u003cdiv\u003e\n        \u003ciframe id=\"biliplayer\" src=\"//player.bilibili.com/player.html?bvid=BV1KW4y1B7W6\u0026page=1\u0026autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" loading=\"lazy\" \u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\n\u003ch2 id=\"youtube\"\u003eYoutube\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003e可能需要科学上网才能显示。\u003c/em\u003e\u003c/p\u003e","tags":["CS"],"title":"A Test Post","type":"post","url":"/post/post2/","weight":0,"wordcount":924},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://Liyixian06.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://Liyixian06.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]